simulation_summary_df <- simulation_summary_rdf() %>% filtered_data(experiment)
output_df <-
simulation_summary_df %>%
select(
study,
experiment,
dataset,
score,
score_sd,
validation_score
)
#x_min <- output_df %>% pull(min_score) %>% min()
#x_max <- output_df %>% pull(max_score) %>% min()
output_df %>%
ggplot(aes(x = study)) +
geom_errorbar(aes(ymin = score-score_sd, ymax=score+score_sd), width = .3, color = "black") +
geom_point(aes(y = score, color = "score"), size = 5) +
geom_point(aes(y = validation_score, color = "validation"), size = 5)
experiment <- "diabetes"
simulation_summary_df <- simulation_summary_rdf() %>% filtered_data(experiment)
output_df <-
simulation_summary_df %>%
select(
study,
experiment,
dataset,
score,
score_sd,
validation_score
)
#x_min <- output_df %>% pull(min_score) %>% min()
#x_max <- output_df %>% pull(max_score) %>% min()
output_df %>%
ggplot(aes(x = study)) +
geom_errorbar(aes(ymin = score-score_sd, ymax=score+score_sd), width = .3, color = "black") +
geom_point(aes(y = score, color = "score"), size = 3) +
geom_point(aes(y = validation_score, color = "validation"), size = 3) +
coord_flip()
experiment <- "diabetes"
simulation_summary_df <- simulation_summary_rdf() %>% filtered_data(experiment)
output_df <-
simulation_summary_df %>%
select(
study,
experiment,
dataset,
score,
score_sd,
validation_score
)
#x_min <- output_df %>% pull(min_score) %>% min()
#x_max <- output_df %>% pull(max_score) %>% min()
output_df %>%
ggplot(aes(x = study)) +
geom_errorbar(aes(ymin = score-score_sd, ymax=score+score_sd), width = .3, color = "black") +
geom_errorbar(aes(ymin = score-score_sd * 2, ymax=score+score_sd* 2), width = .15, color = "black", linetype = 'dotted') +
geom_point(aes(y = score, color = "score"), size = 3) +
geom_point(aes(y = validation_score, color = "validation"), size = 3) +
coord_flip()
experiment <- "diabetes"
simulation_summary_df <- simulation_summary_rdf() %>% filtered_data(experiment)
output_df <-
simulation_summary_df %>%
select(
study,
experiment,
dataset,
score,
score_sd,
validation_score
)
#x_min <- output_df %>% pull(min_score) %>% min()
#x_max <- output_df %>% pull(max_score) %>% min()
output_df %>%
ggplot(aes(x = study)) +
geom_errorbar(aes(ymin = score-score_sd, ymax=score+score_sd), width = .3, color = "black") +
geom_errorbar(aes(ymin = score-score_sd * 2, ymax=score+score_sd* 2), width = .15, color = "black", linetype = 'dotted') +
geom_point(aes(y = score, color = "score"), size = 3) +
geom_point(aes(y = validation_score, color = "validation"), size = 3) +
coord_flip() +
xlab("Study") +
ylab("Score")
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
View(step_detail_df)
source('~/autem/dashboard/process_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
battle_df <- clean_battle(bind_rows(read_battle(simulations_path1), read_battle(simulations_path2), read_battle(simulations_path3)))
source('~/autem/dashboard/process_simulation.R')
# battle_df <- clean_battle(bind_rows(read_battle(simulations_path1), read_battle(simulations_path2)))
datasets <- unique(battle_df$dataset)
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
# Tranforms data
print("Transforming")
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
View(step_detail_df)
View(simulation_summary_df)
View(ranking_detail_df)
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
debugSource('~/autem/dashboard/process_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
debugSource('~/autem/dashboard/process_test_simulation.R')
debugSource('~/autem/dashboard/process_test_simulation.R')
debugSource('~/autem/dashboard/process_test_simulation.R')
debugSource('~/autem/dashboard/process_simulation.R')
debugSource('~/autem/dashboard/process_test_simulation.R')
debugSource('~/autem/dashboard/process_simulation.R')
debugSource('~/autem/dashboard/process_simulation.R')
build_step_detail(battle_df)
step_detail_df <- build_step_detail(battle_df)
debugSource('~/autem/dashboard/process_simulation.R')
step_detail_df <- build_step_detail(battle_df)
ranking_detail_df <- build_ranking_detail(battle_df)
ranking_detail_df <- build_ranking_detail(battle_df)
debugSource('~/autem/dashboard/process_simulation.R')
build_ranking_detail(battle_df)
battle_df <- clean_battle(read_battle(simulations_path2))
step_detail_df
ranking_detail_df <- build_ranking_detail(battle_df)
build_ranking_detail <- function(battle_df) {
step_df7 <-
battle_df %>%
filter(as.integer(as.character(version)) <= 7)
if (nrow(step_df7) > 0)
step_df7 <- step_df7 %>%
mutate(
study = paste0("S", version),
experiment = paste0(dataset),
score = accuracy
)
step_df8 <-
battle_df %>%
filter(as.integer(as.character(version)) >= 8 && as.integer(as.character(version)) <= 9)
if (nrow(step_df8) > 0)
step_df8 <- step_df8 %>%
mutate(
score = accuracy
)
step_df10 <-
battle_df %>%
filter(as.integer(as.character(version)) >= 10)
bind_df <- function(step_df, df) {
if (nrow(df) == 0)
return (step_df)
if (is.null(step_df)) {
return (df)
}
bind_rows(step_df, df)
}
step_df <- NULL
step_df <- bind_df(step_df, step_df7)
step_df <- bind_df(step_df, step_df8)
step_df <- bind_df(step_df, step_df10)
ranking_df <-
step_df %>%
filter(!is.na(ranking)) %>%
select(
study,
experiment,
ranking,
# score = rating,
# Rating is based on entire dataset. In order to validate we need
# it to based purely on the training dataset
# Temporarily base it on accuracy with the sd coming from rating.
# Accuracy is now evaluated using cross validation
# and its probably okay to use that.
score,
score_sd = rating_sd,
dummy_score = dummy_accuracy,
validation_score = validation_accuracy
)
ranking_df
}
build_ranking_detail(battle_df)
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
simulation_summary_df
source('~/autem/dashboard/process_test_simulation.R')
View(simulation_summary_df)
source('~/autem/dashboard/process_test_simulation.R')
View(simulation_summary_df)
ranking_detail_df
baseline_summary_df
simulation_summary_df
debugSource('~/autem/dashboard/process_simulation.R')
build_simulation_summary(configuration_df, step_detail_df, ranking_detail_df, baseline_summary_df)\
build_simulation_summary(configuration_df, step_detail_df, ranking_detail_df, baseline_summary_df)
simulation_summary_df
View(simulation_summary_df)
View(simulation_summary_df)
View(ranking_detail_df)
debugSource('~/autem/dashboard/process_simulation.R')
build_ranking_detail(battle_df)
debugSource('~/autem/dashboard/process_simulation.R')
build_ranking_detail(battle_df)
battle_df
step_df7 <-
battle_df %>%
filter(!is.na(ranking)) %>%
filter(as.integer(as.character(version)) <= 7)
step_df7
if (nrow(step_df7) > 0)
step_df7 <- step_df7 %>%
mutate(
study = paste0("S", version),
experiment = paste0(dataset),
score = accuracy
)
step_df8 <-
battle_df %>%
filter(!is.na(ranking)) %>%
filter(as.integer(as.character(version)) >= 8 && as.integer(as.character(version)) <= 9)
step_df8
if (nrow(step_df8) > 0)
step_df8 <- step_df8 %>%
mutate(
score = accuracy
)
step_df8
step_df10 <-
battle_df %>%
filter(!is.na(ranking)) %>%
filter(as.integer(as.character(version)) >= 10)
step_df10
View(step_df10)
source('~/autem/dashboard/process_test_simulation.R')
battle_df$score
debugSource('~/autem/dashboard/process_simulation.R')
build_ranking_detail(battle_df)
debugSource('~/autem/dashboard/process_simulation.R')
build_ranking_detail(battle_df)
step_df7 <-
battle_df %>%
filter(!is.na(ranking)) %>%
filter(as.integer(as.character(version)) <= 7)
if (nrow(step_df7) > 0)
step_df7 <- step_df7 %>%
mutate(
study = paste0("S", version),
experiment = paste0(dataset),
score = accuracy
)
step_df8 <-
battle_df %>%
filter(!is.na(ranking)) %>%
filter(as.integer(as.character(version)) >= 8 && as.integer(as.character(version)) <= 9)
if (nrow(step_df8) > 0)
step_df8 <- step_df8 %>%
mutate(
score = accuracy
)
step_df10 <-
battle_df %>%
filter(!is.na(ranking)) %>%
filter(as.integer(as.character(version)) >= 10)
bind_df <- function(step_df, df) {
if (nrow(df) == 0)
return (step_df)
if (is.null(step_df)) {
return (df)
}
bind_rows(step_df, df)
}
step_df <- NULL
step_df <- bind_df(step_df, step_df7)
step_df <- bind_df(step_df, step_df8)
step_df <- bind_df(step_df, step_df10)
step_df
ranking_df <-
step_df %>%
select(
study,
experiment,
ranking,
# score = rating,
# Rating is based on entire dataset. In order to validate we need
# it to based purely on the training dataset
# Temporarily base it on accuracy with the sd coming from rating.
# Accuracy is now evaluated using cross validation
# and its probably okay to use that.
score,
score_sd = rating_sd,
dummy_score = dummy_accuracy,
validation_score = validation_accuracy
)
ranking_df
battle_df
build_ranking_detail(battle_df)
source('~/autem/dashboard/process_test_simulation.R')
build_ranking_detail(battle_df)
ranking_detail_df <- build_ranking_detail(battle_df)
debugSource('~/autem/dashboard/process_simulation.R')
ranking_detail_df <- build_ranking_detail(battle_df)
build_ranking_detail(battle_df)
step_df7 <-
battle_df %>%
filter(!is.na(ranking)) %>%
filter(as.integer(as.character(version)) <= 7)
if (nrow(step_df7) > 0)
step_df7 <- step_df7 %>%
mutate(
study = paste0("S", version),
experiment = paste0(dataset),
score = accuracy
)
step_df7
step_df8 <-
battle_df %>%
filter(!is.na(ranking)) %>%
filter(as.integer(as.character(version)) >= 8 && as.integer(as.character(version)) <= 9)
if (nrow(step_df8) > 0)
step_df8 <- step_df8 %>%
mutate(
score = accuracy
)
step_df10 <-
battle_df %>%
filter(!is.na(ranking)) %>%
filter(as.integer(as.character(version)) >= 10)
step_df10
View(step_df10)
step_df
step_df <- NULL
step_df <- bind_df(step_df, step_df7)
bind_df <- function(step_df, df) {
if (nrow(df) == 0)
return (step_df)
if (is.null(step_df)) {
return (df)
}
bind_rows(step_df, df)
}
step_df7
step_df <- bind_df(step_df, step_df7)
step_df
bind_df(step_df, step_df8)
step_df <- bind_df(step_df, step_df8)
step_df <- bind_df(step_df, step_df10)
step_df
ranking_df <-
step_df %>%
select(
study,
experiment,
ranking,
# score = rating,
# Rating is based on entire dataset. In order to validate we need
# it to based purely on the training dataset
# Temporarily base it on accuracy with the sd coming from rating.
# Accuracy is now evaluated using cross validation
# and its probably okay to use that.
score,
score_sd = rating_sd,
dummy_score = dummy_accuracy,
validation_score = validation_accuracy
)
ranking_df %>% filter(experiment == "quick")
ranking_df
ranking_df %>% filter(study == "quick")
step_df10
step_df10 %>% filter(experiment == "diabetes")
step_df10 %>% filter(experiment == "diabetes") %>% View()
battle_df %>% filter(!is.na(ranking))
battle_df %>% filter(!is.na(ranking), experiment == 'diabetes')
battle_df %>% filter(!is.na(ranking), experiment == 'diabetes') %>% View()
source('~/autem/dashboard/process_test_simulation.R')
step_df10 %>% filter(experiment == "diabetes")
step_df10 %>% filter(experiment == "diabetes") %>% View()
step_df8 %>% filter(experiment == "diabetes") %>% View()
step_df8 <-
battle_df %>%
filter(!is.na(ranking)) %>%
filter(as.integer(as.character(version)) in c(8,9))
step_df8 <-
battle_df %>%
filter(!is.na(ranking)) %>%
mutate(version = as.integer(as.character(version))) %>%
filter(version >= 8 & version <= 9)
step_df8 %>% filter(experiment == "diabetes") %>% View()
source('~/autem/dashboard/process_test_simulation.R')
View(step_detail_df)
source('~/autem/dashboard/process_test_simulation.R')
battle_df <- clean_battle(bind_rows(read_battle(simulations_path1), read_battle(simulations_path2), read_battle(simulations_path3)))
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
simulation_summary_df
source('~/autem/dashboard/process_test_simulation.R')
#battle_df <- clean_battle(bind_rows(read_battle(simulations_path2), read_battle(simulations_path3)))
datasets <- unique(battle_df$dataset)
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
source('~/autem/dashboard/process_test_simulation.R')
